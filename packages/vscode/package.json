{
  "name": "agent-brain-platform",
  "displayName": "Agent Brain Platform",
  "description": "Unified platform for AI-assisted development with timeline visualization, architectural guidance, and pathway testing",
  "version": "0.1.31",
  "publisher": "agent-brain-local",
  "icon": "images/timeline_large.png",
  "engines": {
    "vscode": "^1.80.0"
  },
  "categories": [
    "Visualization",
    "Other"
  ],
  "activationEvents": [
    "onStartup"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "repoTimeline.showTimeline",
        "title": "Show Repository Timeline",
        "category": "Timeline"
      },
      {
        "command": "repoTimeline.refreshData",
        "title": "Refresh Timeline Data",
        "category": "Timeline",
        "icon": "$(refresh)"
      },
      {
        "command": "repoTimeline.recordADR",
        "title": "Record Architectural Decision",
        "category": "Timeline",
        "icon": "$(note)"
      },
      {
        "command": "agentBrain.newPrompt",
        "title": "New Enhanced Prompt",
        "category": "Agent Brain",
        "icon": "$(hubot)"
      },
      {
        "command": "agentBrain.endSession",
        "title": "End Session",
        "category": "Agent Brain",
        "icon": "$(stop-circle)"
      },
      {
        "command": "agentBrain.showStatus",
        "title": "Show Session Status",
        "category": "Agent Brain",
        "icon": "$(info)"
      },
      {
        "command": "agentBrain.refreshKnowledge",
        "title": "Refresh Knowledge Base",
        "category": "Agent Brain",
        "icon": "$(refresh)"
      },
      {
        "command": "agentBrain.toggleKnowledgeItem",
        "title": "Toggle Knowledge Item",
        "category": "Agent Brain"
      },
      {
        "command": "agentBrain.showKnowledgeHealth",
        "title": "Show Knowledge Health",
        "category": "Agent Brain",
        "icon": "$(pulse)"
      },
      {
        "command": "agentBrain.addProjectRule",
        "title": "Add Project Rule (ADR)",
        "category": "Agent Brain",
        "icon": "$(note)"
      },
      {
        "command": "agent-brain.setupProjectProfile",
        "title": "Setup Project Profile",
        "category": "Agent Brain",
        "icon": "$(rocket)"
      },
      {
        "command": "agentBrain.addContextRule",
        "title": "Add Project Guideline",
        "category": "Agent Brain",
        "icon": "$(note)"
      },
      {
        "command": "agentBrain.importPackage",
        "title": "Import Expertise Package",
        "category": "Agent Brain",
        "icon": "$(cloud-download)"
      },
      {
        "command": "agentBrain.exportPackage",
        "title": "Export Expertise Package",
        "category": "Agent Brain",
        "icon": "$(cloud-upload)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "repoTimelineActivityBar",
          "title": "AB Timeline",
          "icon": "images/timeline_small.svg"
        }
      ],
      "panel": [
        {
          "id": "repoTimelinePanel",
          "title": "AB Timeline",
          "icon": "images/timeline_small.svg"
        }
      ]
    },
    "views": {
      "repoTimelineActivityBar": [
        {
          "id": "repoTimeline.welcomeView",
          "name": "Getting Started",
          "type": "webview"
        },
        {
          "id": "agentBrain.knowledgeTree",
          "name": "Knowledge Base",
          "when": "workspaceFolderCount != 0"
        }
      ],
      "repoTimelinePanel": [
        {
          "id": "repoTimeline.evolutionView",
          "name": "AB Timeline",
          "type": "webview"
        }
      ]
    },
    "keybindings": [
      {
        "command": "repoTimeline.showTimeline",
        "key": "ctrl+shift+t",
        "mac": "cmd+shift+t",
        "when": "!terminalFocus"
      },
      {
        "command": "agentBrain.newPrompt",
        "key": "ctrl+shift+a",
        "mac": "cmd+shift+a"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "repoTimeline.refreshData",
          "when": "view == repoTimeline.evolutionView",
          "group": "navigation"
        },
        {
          "command": "repoTimeline.recordADR",
          "when": "view == repoTimeline.evolutionView",
          "group": "navigation"
        },
        {
          "command": "agentBrain.refreshKnowledge",
          "when": "view == agentBrain.knowledgeTree",
          "group": "navigation"
        },
        {
          "command": "agentBrain.showKnowledgeHealth",
          "when": "view == agentBrain.knowledgeTree",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "agentBrain.toggleKnowledgeItem",
          "when": "view == agentBrain.knowledgeTree && viewItem == adr-item"
        },
        {
          "command": "agentBrain.toggleKnowledgeItem",
          "when": "view == agentBrain.knowledgeTree && viewItem == pattern-item"
        },
        {
          "command": "agentBrain.toggleKnowledgeItem",
          "when": "view == agentBrain.knowledgeTree && viewItem == learning-item"
        }
      ],
      "commandPalette": [
        {
          "command": "repoTimeline.recordADR",
          "when": "workspaceFolderCount > 0"
        }
      ]
    }
  },
  "scripts": {
    "copy:assets": "node -e \"const fs=require('fs'),path=require('path');const copyDir=(src,dest)=>{if(!fs.existsSync(dest))fs.mkdirSync(dest,{recursive:true});fs.readdirSync(src).forEach(item=>{const srcPath=path.join(src,item),destPath=path.join(dest,item);fs.statSync(srcPath).isDirectory()?copyDir(srcPath,destPath):fs.copyFileSync(srcPath,destPath)})};copyDir('../core/src/domains/visualization/styles','dist/visualization/styles');copyDir('../core/src/domains/visualization/templates','dist/visualization/templates');console.log('Assets copied');\"",
    "version:bump": "node -e \"const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json','utf8'));const v=pkg.version.split('.');v[2]=parseInt(v[2])+1;pkg.version=v.join('.');fs.writeFileSync('package.json',JSON.stringify(pkg,null,2)+'\\n');console.log('Version bumped to',pkg.version);\"",
    "build": "npm run copy:assets && webpack --mode production",
    "watch": "npm run copy:assets && webpack --mode development --watch",
    "package": "npm run version:bump && vsce package",
    "clean": "rm -rf dist"
  },
  "dependencies": {
    "d3": "^7.9.0"
  },
  "devDependencies": {
    "@types/d3": "^7.4.3",
    "@types/node": "^20.19.19",
    "@types/vscode": "^1.80.0",
    "@vscode/vsce": "^2.22.0",
    "clean-webpack-plugin": "^4.0.0",
    "copy-webpack-plugin": "^12.0.2",
    "css-loader": "^7.1.2",
    "html-webpack-plugin": "^5.6.4",
    "style-loader": "^4.0.0",
    "ts-loader": "^9.5.4",
    "typescript": "^5.9.2",
    "webpack": "^5.102.0",
    "webpack-cli": "^6.0.1"
  }
}
